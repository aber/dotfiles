"
" http://stevelosh.com/blog/2011/09/writing-vim-plugins/
"
" Unit testing vimscript?
"   https://bitheap.org/cram/ ?
"
" concepts:
" text objects: ib, ab, ...
" change: ., repeat, undo

hi Marks
[] bessere Erreichbarkeit

<C-W>], <C-W>z, :pc, <C-W>{
:ts, :pt tag, 

zf<m>
zE, zo, zO, zc, zC, <visual>zf, <n>zF, :<r>fo, za, zA, zd, zD, zv, zn, zN, zj, zk

& (repeat subs)

insert mode
<C-R>=expr

cursor movements hjkl, gj, gk
screen scroll zL, <C-U>
fFtT movements f, F, t, T, ; ,
file movements ]], [], [[, [], [{, [(,, [m, ]m, [z, ]z
line movements g$, 0, ^, $
word movements b, B, w, W, gE, ge, fc, Fc, E
<C-K>c1c2

:!, !, :w, :r 

:args, :his, :ju, 

buffer :bm, :ba, :vert ba

undo, text state g-

surround.vim cs"', ds', ysiw", yssb, ...
:help ctermcolor
vim sync windows
conceal
:vertical resize +10, 10 / :resize +10, 10

p, P, gp, gP, [p, 

" movements
zz, zm, zt, zb, zH, zL, zh, zl, <n>%, gg, G, <n>gg/<n>G, <n>L, <n>H
" jump cursor
M, H, L
" scrolling
C-E, C-Y, C-B, C-F, C-D

" matches
%, [(, ]), {, ]}

C-], C-T, K, gf
n(, n), n{, n}
:rdx, rw>>file
e, 0, g0, ^, $, g$
g~move, gUU, guu, gu<m>, gU<m>, ~
u, U, C-U, C-R
ins: C-A, C-P, C-N, C-W, C-K

C-W C-W, C-W h...
C-O
gv, C-V, V
vis: aw, as, ap, ab, aB, o
o, O, a, A, i, I, gI
#, *, g*, g#
=, ==, 

hmm...
'., 'x, `x, mx


" Line completion: in 'insert mode' it provides you with 
" a list of existing lines to choose from in your current 
" file. 
ctrl-x ctrl-l 

" Word completion: in 'insert mode' it provides you with
" a list of possible matching words starting with the 
" next word available in your current file.
ctrl-n

" Word completion: in 'insert mode' it provides you with
" a list of possible matching words going back from the 
" current word in your current file.
ctrl-p

" Searching a dictionary for word completion is done by 
" first setting the dictionary to search:
:set dictionary=/usr/share/dict/words

" Then try to match a word with:
ctrl-x ctrl-k

" lookup
gf, K, Ctrl-]
Ctrl-O

" marks
ma, mA, 'a, '., `a

" tags, tag stack
Ctrl-], Ctrl-t
:tj (jump), :ta (all), :ts (list)
:tn, :tp, :tf, :tl (next, prev, first, last)

" insert mode
Ctrl-A, Ctrl-P, Ctrl-N, Ctrl-W, Ctrl-V<n>

" filter through cmd
<n>!!cmd

" insert current filename
insert mode: C-R=expand("%:f:t")

" file modifiers
%:t:r  name w/o ext
%:t    name w/ ext
%:p:h  absolute dir path
%:h    relative dir path


Langs
====================
drupal
php
  space, 4, .php, .inc, .module
markdown
cucumber
ruby
javascript
  space, 4
coffeescript
rspec
less/sass/scss
  space, 2, .less
haml

snippets
====================
drupal
php

keybindings
====================
cursorline, cursorcolumn

toggle wrap
toggle number
toggle list
toggle expandtab
toggle TagBar
toggle NERDTree
toggle spellcheck
toggle paste

par formatting

themes
====================
ir_block, jellybeans, vylight, delek, desert, koehler
vim-colorschemes
samplerpack
solarized
vividchalk
irbblack

dotfiles
===============
tpope
gary bernhardt


snippets
------------------
console.log
jshint
jslint

keys (janus)
------------------
ib, aB : ()
iB, aB : {}
i", a" : "
it, at : tags
iw, aw : word

f<char> : find character <char>, ; prev . next

> : indent
== : fix indent
C-v <tab> : <tab>


????
> . u
:A
f<char> ; ,


commands
---------------
:scriptnames  " list all loaded plugins

" CtrlP
mappings

" arglist
:args, :next, :n, :prev, :p, :first, :last
@: " repeat last ex cmd
" bufferlist
:ls

" Books
Practical vim

" dot command, repeats last change, undos, ...
" concept of a "change", brushstroke, Esc
.

" vimcasts 43
:argdo, :bufdo
insert last ex command <C-R>: (register :)
set hidden
subst flags: e (no error alerts)
:silent (omit output)
:silent! (even errors)
:edit! (revert to last saved state of file)
:update (write only if modified)

" calculation
line pipe to bc: !!bc, !bc
<number>C-A  to add to next number

" zencoding
<C-Y>,
html:5
foo$*2 ($ --> 1, 2, ...)

" reverse order of lines
:g/^/m0 (whole file, see :h 12.4)
:'<,'>!tac (pipe vis through tac)

" Learning Vimscript the Hard Way
set relativenumber, spell, 
ZZ write and close
*noremap no recursive mapping of keys
<leader>, <localleader>
set, setlocal
map <buffer> ...
use eg: ,ev and ,sv for updating of $MYVIMRC (edit, source)
" mapping normal mode to jk, unlearning <esc>
:inoremap jk <esc>
:inoremap <esc> <nop>
more specific mappings win
:autocmd, :h autocmd-events
same for arrow keys
"snippet" system with :iabbrev <buffer>, local mappings
:augroup combines autocmds, autocmd! to clear group
operator-pending mappings, :onoremap m movement
:normal!
<C-U> deletes '<,'> when in cmd mode
http://learnvimscriptthehardway.stevelosh.com/chapters/16.html


" Using tabs like buffers
" http://stackoverflow.com/questions/102384/using-vims-tabs-like-buffers
" No No!
" Buffers, Windows, Tabs
set hidden
:ls, :bn, :bp, b #, <C-6>, #<C-6>
:bd, :bw " close buffer
:tab sball
:h siwtchbuf
:set switchbuf=usetab,newtab   useopen
map gf :tabe <cfile><CR>
<C-PgUp> <C-PgDn>
<C-w>gf <C-w>T (move current win to new tab)

" variables, options
let var = 0
let &wrap = 1 " option as var
let &l:number = 1 " local option
let &textwidth = &textwidth + 10
echo @a " register as var
echo @/ " last search phrase
" variable scoping
:h internal-variables
let b:hello = "Hello" " buffer

" if
if, else, elseif endif
falsy: 0, "foo", "foo10"
truthy: 1+, "10foo", "123"
== is settings senstive! eg case sensitive --> ==? (ic) ==# (noic)

" functions
if unscoped *must* start with capital letter!
function, endfunction
:call (return value thrown away)
implicit return 0
:h E124 function names

repeat last ex cmd
@: dann @@

http://stolowski.blogspot.co.at/2011/07/finding-your-way-in-vim.html
http://stackoverflow.com/questions/6135404/default-value-of-function-parameter-in-vim-script

The moral of this story is that Vim is a lot like Javascript: it allows you to play fast and loose with types sometimes, but it's a really bad idea to do so because it will come back to bite you at some point.

len(), Strlen(), split(), join(), toupper(), tolower()
:execute "echo 'he'" " interpret string as vim command
bufname("#")
rightbelow, leftabove
:normal, :normal! (no remappings take into account)
execute "normal! " (parses specials like <cr> ...)
:execute "normal! mqA;\<esc>`q" (add ; at end of line)

" vim regexp
:helpgrep

" registers
qa " record in reg a
"ap " paste reg a
"ad " put vis (as macro) into reg a, e.g. a modified macro

:h functions
:h count-items
repeat, strlen, strwidth, strpart

" regexp, 4 modes
magic, verymagic mode --> :h magic
:h /pattern-overview
searching / ? matching :match, :2match, :3match

" custom motions?

http://learnvimscriptthehardway.stevelosh.com/chapters/32.html
word under cursor <cword>, <cWORD>
word a-z, WORD non-blanks w W e E
escape(), shellescape(), expand()
:grep, :grep! (only fill quickfix list, no jump)
:silent execute "grep! ..."
C-W delete word back, C-U delete until begin of line
==# case senstive
@@ unnamed reg, eg when yanking
:h operatorfunc, map-operator
scope s:fname, <SID>fname(vars)

List, Dictionary
get(), has_key(), keys(), values()

toggling options

If a Vimscript variable refers to a function it must start with a capital letter.

expand(), fnamemodify()
:echo split(globpath('.', '*'), '\n')
:echo split(globpath('.', '**'), '\n')
:help globpath(), filename-modifiers, wildcards, resolve(), simplify()

